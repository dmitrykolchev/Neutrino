{"version":3,"file":"signalr.min.js","sources":["../../src/Errors.ts","../../src/HttpClient.ts","../../src/ILogger.ts","../../src/Loggers.ts","../../src/Utils.ts","../../src/FetchHttpClient.ts","../../src/DynamicImports.ts","../../src/XhrHttpClient.ts","../../src/DefaultHttpClient.ts","../../src/TextMessageFormat.ts","../../src/HandshakeProtocol.ts","../../src/IHubProtocol.ts","../../src/Subject.ts","../../src/MessageBuffer.ts","../../src/HubConnection.ts","../../src/DefaultReconnectPolicy.ts","../../src/HeaderNames.ts","../../src/AccessTokenHttpClient.ts","../../src/ITransport.ts","../../src/AbortController.ts","../../src/LongPollingTransport.ts","../../src/ServerSentEventsTransport.ts","../../src/WebSocketTransport.ts","../../src/HttpConnection.ts","../../src/JsonHubProtocol.ts","../../src/HubConnectionBuilder.ts","../../src/browser-index.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpTransportType } from \"./ITransport\";\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message: string) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when multiple errors have occurred. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The collection of errors this error is aggregating. */\r\n    public innerErrors: Error[];\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message: string, innerErrors: Error[]) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n\r\n        this.innerErrors = innerErrors;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    public static get isBrowser(): boolean {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    public static get isWebWorker(): boolean {\r\n        return !Platform.isNode && typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    // react-native has a window but no document\r\n    static get isReactNative(): boolean {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    public static get isNode(): boolean {\r\n        return typeof process !== \"undefined\" && process.release && process.release.name === \"node\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string,\r\n                                  content: string | ArrayBuffer, options: IHttpConnectionOptions): Promise<void> {\r\n    const headers: {[k: string]: string} = {};\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent!)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers},\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel): ILogger {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getErrorString(e: any): string {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    } else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n\r\n/** @private */\r\nexport function getGlobalThis(): unknown {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\r\nimport { configureAbortController, configureFetch } from \"./DynamicImports\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        // This is how you do \"reference\" arguments\r\n        const fetchObj = { _fetchType: undefined, _jar: undefined };\r\n        if (configureFetch(fetchObj)) {\r\n            this._fetchType = fetchObj._fetchType!;\r\n            this._jar = fetchObj._jar;\r\n        } else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n\r\n        this._abortControllerType = AbortController;\r\n        const abortObj = { _abortControllerType: this._abortControllerType };\r\n        if (configureAbortController(abortObj)) {\r\n            this._abortControllerType = abortObj._abortControllerType;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        if (request.content === \"\") {\r\n            request.content = undefined;\r\n        }\r\n        if (request.content) {\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            request.headers = request.headers || {};\r\n            if (isArrayBuffer(request.content)) {\r\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            } else {\r\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\r\n            }\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\") as string;\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\nimport { Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport function configureFetch(obj: { _fetchType?: (input: RequestInfo, init?: RequestInit) => Promise<Response>,\r\n                               _jar?: CookieJar }): boolean\r\n{\r\n    // Node added a fetch implementation to the global scope starting in v18.\r\n    // We need to add a cookie jar in node to be able to share cookies with WebSocket\r\n    if (typeof fetch === \"undefined\" || Platform.isNode) {\r\n        // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._jar = new (require(\"tough-cookie\")).CookieJar();\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            obj._fetchType = require(\"node-fetch\");\r\n        } else {\r\n            // Use fetch from Node if available\r\n            obj._fetchType = fetch;\r\n        }\r\n\r\n        // node-fetch doesn't have a nice API for getting and setting cookies\r\n        // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._fetchType = require(\"fetch-cookie\")(obj._fetchType, obj._jar);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/** @private */\r\nexport function configureAbortController(obj: { _abortControllerType: { prototype: AbortController, new(): AbortController } }): boolean {\r\n    if (typeof AbortController === \"undefined\") {\r\n        // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n        obj._abortControllerType = require(\"abort-controller\");\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/** @private */\r\nexport function getWS(): any {\r\n    return require(\"ws\");\r\n}\r\n\r\n/** @private */\r\nexport function getEventSource(): any {\r\n    return require(\"eventsource\");\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            if (request.content === \"\") {\r\n                request.content = undefined;\r\n            }\r\n            if (request.content) {\r\n                // Explicitly setting the Content-Type header for React Native on Android platform.\r\n                if (isArrayBuffer(request.content)) {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                } else {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n            }\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content);\r\n        });\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n    Ack = 8,\r\n    Sequence = 9\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage |\r\n    AckMessage |\r\n    SequenceMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\nexport interface AckMessage extends HubMessageBase\r\n{\r\n    readonly type: MessageType.Ack;\r\n\r\n    readonly sequenceId: number;\r\n}\r\n\r\nexport interface SequenceMessage extends HubMessageBase\r\n{\r\n    readonly type: MessageType.Sequence;\r\n\r\n    readonly sequenceId: number;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IConnection } from \"./IConnection\";\r\nimport { AckMessage, HubMessage, IHubProtocol, MessageType, SequenceMessage } from \"./IHubProtocol\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class MessageBuffer {\r\n    private readonly _protocol: IHubProtocol;\r\n    private readonly _connection: IConnection;\r\n\r\n    private readonly _bufferSize: number = 100_000;\r\n\r\n    private _messages: BufferedItem[] = [];\r\n    private _totalMessageCount: number = 0;\r\n    private _waitForSequenceMessage: boolean = false;\r\n\r\n    // Message IDs start at 1 and always increment by 1\r\n    private _nextReceivingSequenceId = 1;\r\n    private _latestReceivedSequenceId = 0;\r\n    private _bufferedByteCount: number = 0;\r\n    private _reconnectInProgress: boolean = false;\r\n\r\n    private _ackTimerHandle?: any;\r\n\r\n    constructor(protocol: IHubProtocol, connection: IConnection, bufferSize: number) {\r\n        this._protocol = protocol;\r\n        this._connection = connection;\r\n        this._bufferSize = bufferSize;\r\n    }\r\n\r\n    public async _send(message: HubMessage): Promise<void> {\r\n        const serializedMessage = this._protocol.writeMessage(message);\r\n\r\n        let backpressurePromise: Promise<void> = Promise.resolve();\r\n\r\n        // Only count invocation messages. Acks, pings, etc. don't need to be resent on reconnect\r\n        if (this._isInvocationMessage(message)) {\r\n            this._totalMessageCount++;\r\n            let backpressurePromiseResolver: (value: void) => void = () => {};\r\n            let backpressurePromiseRejector: (value?: void) => void = () => {};\r\n\r\n            if (isArrayBuffer(serializedMessage)) {\r\n                this._bufferedByteCount += serializedMessage.byteLength;\r\n            } else {\r\n                this._bufferedByteCount += serializedMessage.length;\r\n            }\r\n\r\n            if (this._bufferedByteCount >= this._bufferSize) {\r\n                backpressurePromise = new Promise((resolve, reject) => {\r\n                    backpressurePromiseResolver = resolve;\r\n                    backpressurePromiseRejector = reject;\r\n                });\r\n            }\r\n\r\n            this._messages.push(new BufferedItem(serializedMessage, this._totalMessageCount,\r\n                backpressurePromiseResolver, backpressurePromiseRejector));\r\n        }\r\n\r\n        try {\r\n            // If this is set it means we are reconnecting or resending\r\n            // We don't want to send on a disconnected connection\r\n            // And we don't want to send if resend is running since that would mean sending\r\n            // this message twice\r\n            if (!this._reconnectInProgress) {\r\n                await this._connection.send(serializedMessage);\r\n            }\r\n        } catch {\r\n            this._disconnected();\r\n        }\r\n        await backpressurePromise;\r\n    }\r\n\r\n    public _ack(ackMessage: AckMessage): void {\r\n        let newestAckedMessage = -1;\r\n\r\n        // Find index of newest message being acked\r\n        for (let index = 0; index < this._messages.length; index++) {\r\n            const element = this._messages[index];\r\n            if (element._id <= ackMessage.sequenceId) {\r\n                newestAckedMessage = index;\r\n                if (isArrayBuffer(element._message)) {\r\n                    this._bufferedByteCount -= element._message.byteLength;\r\n                } else {\r\n                    this._bufferedByteCount -= element._message.length;\r\n                }\r\n                // resolve items that have already been sent and acked\r\n                element._resolver();\r\n            } else if (this._bufferedByteCount < this._bufferSize) {\r\n                // resolve items that now fall under the buffer limit but haven't been acked\r\n                element._resolver();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (newestAckedMessage !== -1) {\r\n            // We're removing everything including the message pointed to, so add 1\r\n            this._messages = this._messages.slice(newestAckedMessage + 1);\r\n        }\r\n    }\r\n\r\n    public _shouldProcessMessage(message: HubMessage): boolean {\r\n        if (this._waitForSequenceMessage) {\r\n            if (message.type !== MessageType.Sequence) {\r\n                return false;\r\n            } else {\r\n                this._waitForSequenceMessage = false;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // No special processing for acks, pings, etc.\r\n        if (!this._isInvocationMessage(message)) {\r\n            return true;\r\n        }\r\n\r\n        const currentId = this._nextReceivingSequenceId;\r\n        this._nextReceivingSequenceId++;\r\n        if (currentId <= this._latestReceivedSequenceId) {\r\n            if (currentId === this._latestReceivedSequenceId) {\r\n                // Should only hit this if we just reconnected and the server is sending\r\n                // Messages it has buffered, which would mean it hasn't seen an Ack for these messages\r\n                this._ackTimer();\r\n            }\r\n            // Ignore, this is a duplicate message\r\n            return false;\r\n        }\r\n\r\n        this._latestReceivedSequenceId = currentId;\r\n\r\n        // Only start the timer for sending an Ack message when we have a message to ack. This also conveniently solves\r\n        // timer throttling by not having a recursive timer, and by starting the timer via a network call (recv)\r\n        this._ackTimer();\r\n        return true;\r\n    }\r\n\r\n    public _resetSequence(message: SequenceMessage): void {\r\n        if (message.sequenceId > this._nextReceivingSequenceId) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._connection.stop(new Error(\"Sequence ID greater than amount of messages we've received.\"));\r\n            return;\r\n        }\r\n\r\n        this._nextReceivingSequenceId = message.sequenceId;\r\n    }\r\n\r\n    public _disconnected(): void {\r\n        this._reconnectInProgress = true;\r\n        this._waitForSequenceMessage = true;\r\n    }\r\n\r\n    public async _resend(): Promise<void> {\r\n        const sequenceId = this._messages.length !== 0\r\n            ? this._messages[0]._id\r\n            :  this._totalMessageCount + 1;\r\n        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Sequence, sequenceId }));\r\n\r\n        // Get a local variable to the _messages, just in case messages are acked while resending\r\n        // Which would slice the _messages array (which creates a new copy)\r\n        const messages = this._messages;\r\n        for (const element of messages) {\r\n            await this._connection.send(element._message);\r\n        }\r\n\r\n        this._reconnectInProgress = false;\r\n    }\r\n\r\n    public _dispose(error?: Error): void {\r\n        error ??= new Error(\"Unable to reconnect to server.\")\r\n\r\n        // Unblock backpressure if any\r\n        for (const element of this._messages) {\r\n            element._rejector(error);\r\n        }\r\n    }\r\n\r\n    private _isInvocationMessage(message: HubMessage): boolean {\r\n        // There is no way to check if something implements an interface.\r\n        // So we individually check the messages in a switch statement.\r\n        // To make sure we don't miss any message types we rely on the compiler\r\n        // seeing the function returns a value and it will do the\r\n        // exhaustive check for us on the switch statement, since we don't use 'case default'\r\n        switch (message.type) {\r\n            case MessageType.Invocation:\r\n            case MessageType.StreamItem:\r\n            case MessageType.Completion:\r\n            case MessageType.StreamInvocation:\r\n            case MessageType.CancelInvocation:\r\n                return true;\r\n            case MessageType.Close:\r\n            case MessageType.Sequence:\r\n            case MessageType.Ping:\r\n            case MessageType.Ack:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private _ackTimer(): void {\r\n        if (this._ackTimerHandle === undefined) {\r\n            this._ackTimerHandle = setTimeout(async () => {\r\n                try {\r\n                    if (!this._reconnectInProgress) {\r\n                        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Ack, sequenceId: this._latestReceivedSequenceId }))\r\n                    }\r\n                // Ignore errors, that means the connection is closed and we don't care about the Ack message anymore.\r\n                } catch { }\r\n\r\n                clearTimeout(this._ackTimerHandle);\r\n                this._ackTimerHandle = undefined;\r\n            // 1 second delay so we don't spam Ack messages if there are many messages being received at once.\r\n            }, 1000);\r\n        }\r\n    }\r\n}\r\n\r\nclass BufferedItem {\r\n    constructor(message: string | ArrayBuffer, id: number, resolver: (value: void) => void, rejector: (value?: any) => void) {\r\n        this._message = message;\r\n        this._id = id;\r\n        this._resolver = resolver;\r\n        this._rejector = rejector;\r\n    }\r\n\r\n    _message: string | ArrayBuffer;\r\n    _id: number;\r\n    _resolver: (value: void) => void;\r\n    _rejector: (value?: any) => void;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { AbortError } from \"./Errors\";\r\nimport { CancelInvocationMessage, CloseMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nimport { MessageBuffer } from \"./MessageBuffer\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\nconst DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE = 100_000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private readonly _statefulReconnectBufferSize: number;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: (((...args: any[]) => void) | ((...args: any[]) => any))[] };\r\n    private _invocationId: number;\r\n    private _messageBuffer?: MessageBuffer;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(\r\n        connection: IConnection,\r\n        logger: ILogger,\r\n        protocol: IHubProtocol,\r\n        reconnectPolicy?: IRetryPolicy,\r\n        serverTimeoutInMilliseconds?: number,\r\n        keepAliveIntervalInMilliseconds?: number,\r\n        statefulReconnectBufferSize?: number): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy,\r\n            serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize);\r\n    }\r\n\r\n    private constructor(\r\n        connection: IConnection,\r\n        logger: ILogger,\r\n        protocol: IHubProtocol,\r\n        reconnectPolicy?: IRetryPolicy,\r\n        serverTimeoutInMilliseconds?: number,\r\n        keepAliveIntervalInMilliseconds?: number,\r\n        statefulReconnectBufferSize?: number) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = serverTimeoutInMilliseconds ?? DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = keepAliveIntervalInMilliseconds ?? DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._statefulReconnectBufferSize = statefulReconnectBufferSize ?? DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            let version = this._protocol.version;\r\n            if (!this.connection.features.reconnect) {\r\n                // Stateful Reconnect starts with HubProtocol version 2, newer clients connecting to older servers will fail to connect due to\r\n                // the handshake only supporting version 1, so we will try to send version 1 during the handshake to keep old servers working.\r\n                version = 1;\r\n            }\r\n\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n\r\n            const useStatefulReconnect = this.connection.features.reconnect || false;\r\n            if (useStatefulReconnect) {\r\n                this._messageBuffer = new MessageBuffer(this._protocol, this.connection, this._statefulReconnectBufferSize);\r\n                this.connection.features.disconnected = this._messageBuffer._disconnected.bind(this._messageBuffer);\r\n                this.connection.features.resend = () => {\r\n                    if (this._messageBuffer) {\r\n                        return this._messageBuffer._resend();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!this.connection.features.inherentKeepAlive) {\r\n                await this._sendMessage(this._cachedPingMessage);\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this.connection.features.reconnect = false;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        const state = this._connectionState;\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (state === HubConnectionState.Connected) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._sendCloseMessage();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    private async _sendCloseMessage() {\r\n        try {\r\n            await this._sendWithProtocol(this._createCloseMessage());\r\n        } catch {\r\n            // Ignore, this is a best effort attempt to let the server know the client closed gracefully.\r\n        }\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        if (this._messageBuffer) {\r\n            return this._messageBuffer._send(message);\r\n        } else {\r\n            return this._sendMessage(this._protocol.writeMessage(message));\r\n        }\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => any): void\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                if (this._messageBuffer && !this._messageBuffer._shouldProcessMessage(message)) {\r\n                    // Don't process the message, we are either waiting for a SequenceMessage or received a duplicate message\r\n                    continue;\r\n                }\r\n\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    case MessageType.Ack:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._ack(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Sequence:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._resetSequence(message);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private async _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methodName = invocationMessage.target.toLowerCase();\r\n        const methods = this._methods[methodName];\r\n        if (!methods) {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\r\n\r\n            // No handlers provided by client but the server is expecting a response still, so we send an error\r\n            if (invocationMessage.invocationId) {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\r\n        const methodsCopy = methods.slice();\r\n\r\n        // Server expects a response\r\n        const expectsResponse = invocationMessage.invocationId ? true : false;\r\n        // We preserve the last result or exception but still call all handlers\r\n        let res;\r\n        let exception;\r\n        let completionMessage;\r\n        for (const m of methodsCopy) {\r\n            try {\r\n                const prevRes = res;\r\n                res = await m.apply(this, invocationMessage.arguments);\r\n                if (expectsResponse && res && prevRes) {\r\n                    this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\r\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `Client provided multiple results.`, null);\r\n                }\r\n                // Ignore exception if we got a result after, the exception will be logged\r\n                exception = undefined;\r\n            } catch (e) {\r\n                exception = e;\r\n                this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\r\n            }\r\n        }\r\n        if (completionMessage) {\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else if (expectsResponse) {\r\n            // If there is an exception that means either no result was given or a handler after a result threw\r\n            if (exception) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `${exception}`, null);\r\n            } else if (res !== undefined) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, null, res);\r\n            } else {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, \"Client didn't provide a result.\", null);\r\n            }\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else {\r\n            if (res) {\r\n                this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (this._messageBuffer) {\r\n                this._messageBuffer._dispose(error ?? new Error(\"Connection closed.\"));\r\n                this._messageBuffer = undefined;\r\n            }\r\n\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error((e as any).toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n\r\n    private _createCloseMessage(): CloseMessage {\r\n        return { type: MessageType.Close };\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport abstract class HeaderNames {\r\n    static readonly Authorization = \"Authorization\";\r\n    static readonly Cookie = \"Cookie\";\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\n\r\n/** @private */\r\nexport class AccessTokenHttpClient extends HttpClient {\r\n    private _innerClient: HttpClient;\r\n    _accessToken: string | undefined;\r\n    _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n\r\n    constructor(innerClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined) {\r\n        super();\r\n\r\n        this._innerClient = innerClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n    }\r\n\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        let allowRetry = true;\r\n        if (this._accessTokenFactory && (!this._accessToken || (request.url && request.url.indexOf(\"/negotiate?\") > 0))) {\r\n            // don't retry if the request is a negotiate or if we just got a potentially new token from the access token factory\r\n            allowRetry = false;\r\n            this._accessToken = await this._accessTokenFactory();\r\n        }\r\n        this._setAuthorizationHeader(request);\r\n        const response = await this._innerClient.send(request);\r\n\r\n        if (allowRetry && response.statusCode === 401 && this._accessTokenFactory) {\r\n            this._accessToken = await this._accessTokenFactory();\r\n            this._setAuthorizationHeader(request);\r\n            return await this._innerClient.send(request);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    private _setAuthorizationHeader(request: HttpRequest) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (this._accessToken) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${this._accessToken}`\r\n        }\r\n        // don't remove the header if there isn't an access token factory, the user manually added the header in this case\r\n        else if (this._accessTokenFactory) {\r\n            if (request.headers[HeaderNames.Authorization]) {\r\n                delete request.headers[HeaderNames.Authorization];\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._innerClient.getCookieString(url);\r\n    }\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error | unknown;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error | unknown) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${(e as any).message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n\r\n            let error;\r\n            try {\r\n                await this._httpClient.delete(this._url!, deleteOptions);\r\n            } catch (err) {\r\n                error = err;\r\n            }\r\n\r\n            if (error) {\r\n                if (error instanceof HttpError) {\r\n                    if (error.statusCode === 404) {\r\n                        this._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\r\n                    } else {\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\r\n                    }\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n            }\r\n\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessToken: string | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error | unknown) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessToken: string | undefined, logger: ILogger,\r\n                options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessToken = accessToken;\r\n        this._logger = logger;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this._url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessToken) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(this._accessToken)}`;\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent!)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    } else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error | unknown) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        let token: string;\r\n        if (this._accessTokenFactory) {\r\n            token = await this._accessTokenFactory();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode || Platform.isReactNative) {\r\n                const headers: {[k: string]: string} = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (token) {\r\n                    headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n                }\r\n\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = cookies;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            else\r\n            {\r\n                if (token) {\r\n                    url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n                }\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the endpoint may not be a SignalR endpoint,\"\r\n                        + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event: CloseEvent | Error | unknown): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { getEventSource, getWS } from \"./DynamicImports\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n    useStatefulReconnect?: boolean;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: AccessTokenHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            webSocketModule = getWS();\r\n            eventSourceModule = getEventSource();\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new AbortError(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n\r\n            if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\r\n                return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\r\n            }\r\n\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat,\r\n                negotiate?.useStatefulReconnect === true);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!,\r\n                    this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        if (this.features.reconnect) {\r\n            this.transport!.onclose = async (e) => {\r\n                let callStop = false;\r\n                if (this.features.reconnect) {\r\n                    try {\r\n                        this.features.disconnected();\r\n                        await this.transport!.connect(url, transferFormat);\r\n                        await this.features.resend();\r\n                    } catch {\r\n                        callStop = true;\r\n                    }\r\n                } else {\r\n                    this._stopConnection(e);\r\n                    return;\r\n                }\r\n\r\n                if (callStop) {\r\n                    this._stopConnection(e);\r\n                }\r\n            };\r\n        } else {\r\n            this.transport!.onclose = (e) => this._stopConnection(e);\r\n        }\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined,\r\n        requestedTransferFormat: TransferFormat, useStatefulReconnect: boolean): ITransport | Error | unknown {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const negotiateUrl = new URL(url);\r\n\r\n        if (negotiateUrl.pathname.endsWith('/')) {\r\n            negotiateUrl.pathname += \"negotiate\";\r\n        } else {\r\n            negotiateUrl.pathname += \"/negotiate\";\r\n        }\r\n        const searchParams = new URLSearchParams(negotiateUrl.searchParams);\r\n\r\n        if (!searchParams.has(\"negotiateVersion\")) {\r\n            searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\r\n        }\r\n\r\n        if (searchParams.has(\"useStatefulReconnect\")) {\r\n            if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\r\n                this._options._useStatefulReconnect = true;\r\n            }\r\n        } else if (this._options._useStatefulReconnect === true) {\r\n            searchParams.append(\"useStatefulReconnect\", \"true\");\r\n        }\r\n\r\n        negotiateUrl.search = searchParams.toString();\r\n\r\n        return negotiateUrl.toString();\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AckMessage, CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, SequenceMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 2;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                case MessageType.Ack:\r\n                    this._isAckMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Sequence:\r\n                    this._isSequenceMessage(parsedMessage);\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _isAckMessage(message: AckMessage): void {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Ack message.\");\r\n        }\r\n    }\r\n\r\n    private _isSequenceMessage(message: SequenceMessage): void {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Sequence message.\");\r\n        }\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStatefulReconnectOptions } from \"./IStatefulReconnectOptions\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    private _serverTimeoutInMilliseconds?: number;\r\n    private _keepAliveIntervalInMilliseconds ?: number;\r\n\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    private _statefulReconnectBufferSize?: number;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://learn.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://learn.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withServerTimeout(milliseconds: number): HubConnectionBuilder {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n\r\n        this._serverTimeoutInMilliseconds = milliseconds;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withKeepAliveInterval(milliseconds: number): HubConnectionBuilder {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n\r\n        this._keepAliveIntervalInMilliseconds = milliseconds;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Enables and configures options for the Stateful Reconnect feature.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withStatefulReconnect(options?: IStatefulReconnectOptions): HubConnectionBuilder {\r\n        if (this.httpConnectionOptions === undefined) {\r\n            this.httpConnectionOptions = {};\r\n        }\r\n        this.httpConnectionOptions._useStatefulReconnect = true;\r\n\r\n        this._statefulReconnectBufferSize = options?.bufferSize;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy,\r\n            this._serverTimeoutInMilliseconds,\r\n            this._keepAliveIntervalInMilliseconds,\r\n            this._statefulReconnectBufferSize);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\r\n\r\n// Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties\r\n// that exist on Uint8Array with the same name, and JavaScript is magic.\r\n// We make them 'writable' because the Buffer polyfill messes with it as well.\r\nif (!Uint8Array.prototype.indexOf) {\r\n    Object.defineProperty(Uint8Array.prototype, \"indexOf\", {\r\n        value: Array.prototype.indexOf,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.slice) {\r\n    Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n        // wrap the slice in Uint8Array so it looks like a Uint8Array.slice call\r\n        // eslint-disable-next-line object-shorthand\r\n        value: function(start?: number, end?: number) { return new Uint8Array(Array.prototype.slice.call(this, start, end)); },\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.forEach) {\r\n    Object.defineProperty(Uint8Array.prototype, \"forEach\", {\r\n        value: Array.prototype.forEach,\r\n        writable: true,\r\n    });\r\n}\r\n\r\nexport * from \"./index\";\r\n"],"names":["HttpError","Error","constructor","errorMessage","statusCode","trueProto","prototype","super","this","__proto__","TimeoutError","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","HttpResponse","statusText","content","HttpClient","get","url","options","send","method","post","getCookieString","LogLevel","NullLogger","log","_logLevel","_message","instance","VERSION","Arg","isRequired","val","name","isNotEmpty","match","isIn","values","Platform","isBrowser","isNode","window","document","isWebWorker","self","isReactNative","process","release","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","length","formatArrayBuffer","ArrayBuffer","async","sendMessage","logger","transportName","httpClient","headers","value","getUserAgentHeader","Trace","logMessageContent","responseType","response","timeout","withCredentials","SubjectSubscription","subject","observer","_subject","_observer","dispose","index","observers","indexOf","splice","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","Critical","error","Warning","warn","Information","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","platform","versions","node","getErrorString","e","stack","FetchHttpClient","_logger","fetchObj","_fetchType","undefined","_jar","obj","fetch","require","CookieJar","bind","globalThis","global","getGlobalThis","_abortControllerType","AbortController","abortObj","configureAbortController","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","setTimeout","body","cache","credentials","mode","redirect","signal","clearTimeout","ok","deserializeContent","status","payload","cookies","getCookies","c","join","arrayBuffer","text","XhrHttpClient","Promise","reject","resolve","xhr","XMLHttpRequest","open","setRequestHeader","Object","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","TextMessageFormat","write","output","RecordSeparator","parse","input","messages","pop","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","JSON","stringify","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","Array","slice","call","buffer","textData","substring","type","MessageType","Subject","next","item","err","complete","subscribe","push","MessageBuffer","protocol","connection","bufferSize","_bufferSize","_messages","_totalMessageCount","_waitForSequenceMessage","_nextReceivingSequenceId","_latestReceivedSequenceId","_bufferedByteCount","_reconnectInProgress","_protocol","_connection","_send","serializedMessage","writeMessage","backpressurePromise","_isInvocationMessage","backpressurePromiseResolver","backpressurePromiseRejector","BufferedItem","_disconnected","_ack","ackMessage","newestAckedMessage","element","_id","sequenceId","_resolver","_shouldProcessMessage","Sequence","currentId","_ackTimer","_resetSequence","stop","_resend","_dispose","_rejector","Invocation","StreamItem","Completion","StreamInvocation","CancelInvocation","Close","Ping","Ack","_ackTimerHandle","id","resolver","rejector","HubConnectionState","HubConnection","create","reconnectPolicy","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","statefulReconnectBufferSize","_nextKeepAlive","_freezeEventListener","_statefulReconnectBufferSize","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","state","connectionId","baseUrl","Reconnecting","start","_startPromise","_startWithStateTransitions","Connecting","Debug","_startInternal","addEventListener","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","transferFormat","features","reconnect","_sendMessage","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_messageBuffer","disconnected","resend","inherentKeepAlive","_cleanupPingTimer","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","_completeClose","_sendCloseMessage","_sendWithProtocol","_createCloseMessage","stream","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","then","invocationEvent","_launchStreams","sendPromise","_createInvocation","invoke","result","on","newMethod","toLowerCase","off","handlers","removeIdx","callback","onreconnecting","onreconnected","_processHandshakeResponse","parseMessages","_invokeClientMethod","allowReconnect","responseMessage","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","target","methods","_createCompletionMessage","methodsCopy","expectsResponse","res","exception","completionMessage","m","prevRes","arguments","_cancelCallbacksWithError","_reconnect","removeEventListener","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","key","nonblocking","streamId","_createStreamItemMessage","i","argument","_isObservable","arg","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HeaderNames","Authorization","Cookie","AccessTokenHttpClient","innerClient","accessTokenFactory","_innerClient","_accessTokenFactory","allowRetry","_accessToken","_setAuthorizationHeader","HttpTransportType","TransferFormat","_isAborted","LongPollingTransport","pollAborted","_pollAbort","_options","_running","connect","_url","Binary","pollOptions","pollUrl","_closeError","_receiving","_poll","_raiseOnClose","deleteOptions","delete","logMessage","ServerSentEventsTransport","accessToken","encodeURIComponent","eventSource","opened","Text","EventSource","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","token","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_startInternalPromise","_sendQueue","TransportSendQueue","_stopError","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","useStatefulReconnect","_useStatefulReconnect","_createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","ex","ServerSentEvents","LongPolling","callStop","actualTransport","transportMatches","transferFormats","map","s","lastIndexOf","aTag","createElement","href","URL","pathname","endsWith","searchParams","URLSearchParams","has","append","search","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","reduce","a","offset","set","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isStreamItemMessage","_isCompletionMessage","_isAckMessage","_isSequenceMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","HubConnectionBuilder","configureLogging","logging","mapping","parseLogLevel","withUrl","transportTypeOrOptions","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","isArray","withServerTimeout","milliseconds","_serverTimeoutInMilliseconds","withKeepAliveInterval","_keepAliveIntervalInMilliseconds","withStatefulReconnect","build","defineProperty","writable","end"],"mappings":"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"}