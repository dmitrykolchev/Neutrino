{"version":3,"file":"msgpack.min.js","sources":["../../src/utils/int.ts","../../src/utils/utf8.ts","../../src/ExtData.ts","../../src/DecodeError.ts","../../src/timestamp.ts","../../src/ExtensionCodec.ts","../../src/utils/typedArrays.ts","../../src/Encoder.ts","../../src/encode.ts","../../src/utils/prettyByte.ts","../../src/Decoder.ts","../../src/CachedKeyDecoder.ts","../../src/decode.ts","../../src/utils/stream.ts","../../src/decodeAsync.ts"],"sourcesContent":["// Integer Utility\n\nexport const UINT32_MAX = 0xffff_ffff;\n\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number): number {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number): number {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n","/* eslint-disable @typescript-eslint/no-unnecessary-condition */\nimport { UINT32_MAX } from \"./int\";\n\nconst TEXT_ENCODING_AVAILABLE =\n  (typeof process === \"undefined\" || process?.env?.[\"TEXT_ENCODING\"] !== \"never\") &&\n  typeof TextEncoder !== \"undefined\" &&\n  typeof TextDecoder !== \"undefined\";\n\nexport function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport const TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? UINT32_MAX\n  : typeof process !== \"undefined\" && process?.env?.[\"TEXT_ENCODING\"] !== \"force\"\n  ? 200\n  : 0;\n\nfunction utf8EncodeTEencode(str: string, output: Uint8Array, outputOffset: number): void {\n  output.set(sharedTextEncoder!.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str: string, output: Uint8Array, outputOffset: number): void {\n  sharedTextEncoder!.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport const utf8EncodeTE = sharedTextEncoder?.encodeInto ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\n\nconst CHUNK_SIZE = 0x1_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++]!;\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      const byte4 = bytes[offset++]! & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport const TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? UINT32_MAX\n  : typeof process !== \"undefined\" && process?.env?.[\"TEXT_DECODER\"] !== \"force\"\n  ? 200\n  : 0;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  return sharedTextDecoder!.decode(stringBytes);\n}\n","/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(readonly type: number, readonly data: Uint8Array) {}\n}\n","export class DecodeError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    // fix the prototype chain in a cross-platform way\n    const proto: typeof DecodeError.prototype = Object.create(DecodeError.prototype);\n    Object.setPrototypeOf(this, proto);\n\n    Object.defineProperty(this, \"name\", {\n      configurable: true,\n      enumerable: false,\n      value: DecodeError.name,\n    });\n  }\n}\n","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError\";\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n","// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interface to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n","export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView | ArrayBuffer): Uint8Array {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (buffer instanceof ArrayBuffer) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n","import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport type { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder<ContextType = undefined> {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxDepth = DEFAULT_MAX_DEPTH,\n    private readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    private readonly sortKeys = false,\n    private readonly forceFloat32 = false,\n    private readonly ignoreUndefined = false,\n    private readonly forceIntegerToFloat = false,\n  ) {}\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  public encodeSharedRef(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  private encodeNumber(object: number) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n","import { Encoder } from \"./Encoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type EncodeOptions<ContextType = undefined> = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * The maximum depth in nested objects and arrays.\n     *\n     * Defaults to 100.\n     */\n    maxDepth: number;\n\n    /**\n     * The initial size of the internal buffer.\n     *\n     * Defaults to 2048.\n     */\n    initialBufferSize: number;\n\n    /**\n     * If `true`, the keys of an object is sorted. In other words, the encoded\n     * binary is canonical and thus comparable to another encoded binary.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    sortKeys: boolean;\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     *\n     * Defaults to `false`.\n     */\n    forceFloat32: boolean;\n\n    /**\n     * If `true`, an object property with `undefined` value are ignored.\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    ignoreUndefined: boolean;\n\n    /**\n     * If `true`, integer numbers are encoded as floating point numbers,\n     * with the `forceFloat32` option taken into account.\n     *\n     * Defaults to `false`.\n     */\n    forceIntegerToFloat: boolean;\n  }>\n> &\n  ContextOf<ContextType>;\n\nconst defaultEncodeOptions: EncodeOptions = {};\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode<ContextType = undefined>(\n  value: unknown,\n  options: EncodeOptions<SplitUndefined<ContextType>> = defaultEncodeOptions as any,\n): Uint8Array {\n  const encoder = new Encoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxDepth,\n    options.initialBufferSize,\n    options.sortKeys,\n    options.forceFloat32,\n    options.ignoreUndefined,\n    options.forceIntegerToFloat,\n  );\n  return encoder.encodeSharedRef(value);\n}\n","export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\n}\n","import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { getInt64, getUint64, UINT32_MAX } from \"./utils/int\";\nimport { utf8DecodeJs, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder, KeyDecoder } from \"./CachedKeyDecoder\";\nimport { DecodeError } from \"./DecodeError\";\n\nconst enum State {\n  ARRAY,\n  MAP_KEY,\n  MAP_VALUE,\n}\n\ntype MapKeyType = string | number;\n\nconst isValidMapKeyType = (key: unknown): key is MapKeyType => {\n  const keyType = typeof key;\n\n  return keyType === \"string\" || keyType === \"number\";\n};\n\ntype StackMapState = {\n  type: State.MAP_KEY | State.MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: State.ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\n  try {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n  } catch (e: any) {\n    return e.constructor;\n  }\n  throw new Error(\"never reached\");\n})();\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder<ContextType = undefined> {\n  private totalPos = 0;\n  private pos = 0;\n\n  private view = EMPTY_VIEW;\n  private bytes = EMPTY_BYTES;\n  private headByte = HEAD_BYTE_REQUIRED;\n  private readonly stack: Array<StackState> = [];\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxStrLength = UINT32_MAX,\n    private readonly maxBinLength = UINT32_MAX,\n    private readonly maxArrayLength = UINT32_MAX,\n    private readonly maxMapLength = UINT32_MAX,\n    private readonly maxExtLength = UINT32_MAX,\n    private readonly keyDecoder: KeyDecoder | null = sharedCachedKeyDecoder,\n  ) {}\n\n  private reinitializeState() {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n    this.stack.length = 0;\n\n    // view, bytes, and pos will be re-initialized in setBuffer()\n  }\n\n  private setBuffer(buffer: ArrayLike<number> | BufferSource): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  private appendBuffer(buffer: ArrayLike<number> | BufferSource) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n      this.setBuffer(buffer);\n    } else {\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n\n      // concat remainingData + newData\n      const newBuffer = new Uint8Array(remainingData.length + newData.length);\n      newBuffer.set(remainingData);\n      newBuffer.set(newData, remainingData.length);\n      this.setBuffer(newBuffer);\n    }\n  }\n\n  private hasRemaining(size: number) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  private createExtraByteError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  /**\n   * @throws {@link DecodeError}\n   * @throws {@link RangeError}\n   */\n  public decode(buffer: ArrayLike<number> | BufferSource): unknown {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    const object = this.doDecodeSync();\n    if (this.hasRemaining(1)) {\n      throw this.createExtraByteError(this.pos);\n    }\n    return object;\n  }\n\n  public *decodeMulti(buffer: ArrayLike<number> | BufferSource): Generator<unknown, void, unknown> {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    while (this.hasRemaining(1)) {\n      yield this.doDecodeSync();\n    }\n  }\n\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.doDecodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining(1)) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  public decodeArrayStream(\n    stream: AsyncIterable<ArrayLike<number> | BufferSource>,\n  ): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  public decodeStream(stream: AsyncIterable<ArrayLike<number> | BufferSource>): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.doDecodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  private doDecodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeUtf8String(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeUtf8String(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeUtf8String(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeUtf8String(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack[stack.length - 1]!;\n        if (state.type === State.ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            stack.pop();\n            object = state.array;\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === State.MAP_KEY) {\n          if (!isValidMapKeyType(object)) {\n            throw new DecodeError(\"The type of key must be string or number but \" + typeof object);\n          }\n          if (object === \"__proto__\") {\n            throw new DecodeError(\"The key __proto__ is not allowed\");\n          }\n\n          state.key = object;\n          state.type = State.MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            stack.pop();\n            object = state.map;\n          } else {\n            state.key = null;\n            state.type = State.MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  private readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  private complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  private pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new DecodeError(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.push({\n      type: State.MAP_KEY,\n      size,\n      key: null,\n      readCount: 0,\n      map: {},\n    });\n  }\n\n  private pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new DecodeError(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.push({\n      type: State.ARRAY,\n      size,\n      array: new Array<unknown>(size),\n      position: 0,\n    });\n  }\n\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new DecodeError(\n        `Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`,\n      );\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else if (byteLength > TEXT_DECODER_THRESHOLD) {\n      object = utf8DecodeTD(this.bytes, offset, byteLength);\n    } else {\n      object = utf8DecodeJs(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  private stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack[this.stack.length - 1]!;\n      return state.type === State.MAP_KEY;\n    }\n    return false;\n  }\n\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  private decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new DecodeError(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  }\n\n  private lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  private lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  private lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  private readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readU64(): number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64(): number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n","import { utf8DecodeJs } from \"./utils/utf8\";\n\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\n\nexport interface KeyDecoder {\n  canBeCached(byteLength: number): boolean;\n  decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string;\n}\ninterface KeyCacheRecord {\n  readonly bytes: Uint8Array;\n  readonly str: string;\n}\n\nexport class CachedKeyDecoder implements KeyDecoder {\n  hit = 0;\n  miss = 0;\n  private readonly caches: Array<Array<KeyCacheRecord>>;\n\n  constructor(readonly maxKeyLength = DEFAULT_MAX_KEY_LENGTH, readonly maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {\n    // avoid `new Array(N)`, which makes a sparse array,\n    // because a sparse array is typically slower than a non-sparse array.\n    this.caches = [];\n    for (let i = 0; i < this.maxKeyLength; i++) {\n      this.caches.push([]);\n    }\n  }\n\n  public canBeCached(byteLength: number): boolean {\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\n  }\n\n  private find(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\n    const records = this.caches[byteLength - 1]!;\n\n    FIND_CHUNK: for (const record of records) {\n      const recordBytes = record.bytes;\n\n      for (let j = 0; j < byteLength; j++) {\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\n          continue FIND_CHUNK;\n        }\n      }\n      return record.str;\n    }\n    return null;\n  }\n\n  private store(bytes: Uint8Array, value: string) {\n    const records = this.caches[bytes.length - 1]!;\n    const record: KeyCacheRecord = { bytes, str: value };\n\n    if (records.length >= this.maxLengthPerKey) {\n      // `records` are full!\n      // Set `record` to an arbitrary position.\n      records[(Math.random() * records.length) | 0] = record;\n    } else {\n      records.push(record);\n    }\n  }\n\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n    const cachedValue = this.find(bytes, inputOffset, byteLength);\n    if (cachedValue != null) {\n      this.hit++;\n      return cachedValue;\n    }\n    this.miss++;\n\n    const str = utf8DecodeJs(bytes, inputOffset, byteLength);\n    // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n    this.store(slicedCopyOfBytes, str);\n    return str;\n  }\n}\n","import { Decoder } from \"./Decoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type DecodeOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Maximum string length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decode<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): unknown {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decode(buffer);\n}\n\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMulti<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Generator<unknown, void, unknown> {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeMulti(buffer);\n}\n","// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: ReadableStreamLike<T>): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nfunction assertNonNull<T>(value: T | null | undefined): asserts value is T {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      assertNonNull(value);\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterable<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n","import { Decoder } from \"./Decoder\";\nimport { ensureAsyncIterable } from \"./utils/stream\";\nimport { defaultDecodeOptions } from \"./decode\";\nimport type { ReadableStreamLike } from \"./utils/stream\";\nimport type { DecodeOptions } from \"./decode\";\nimport type { SplitUndefined } from \"./context\";\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n export async function decodeAsync<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Promise<unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeAsync(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n export function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMultiStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\nexport function decodeStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  return decodeMultiStream(streamLike, options);\n}\n"],"names":["UINT32_MAX","setInt64","view","offset","value","high","Math","floor","low","setUint32","getInt64","getInt32","getUint32","TEXT_ENCODING_AVAILABLE","process","env","TextEncoder","TextDecoder","utf8Count","str","strLength","length","byteLength","pos","charCodeAt","extra","sharedTextEncoder","undefined","TEXT_ENCODER_THRESHOLD","utf8EncodeTE","encodeInto","output","outputOffset","subarray","set","encode","utf8DecodeJs","bytes","inputOffset","end","units","result","byte1","byte2","push","byte3","unit","String","fromCharCode","sharedTextDecoder","TEXT_DECODER_THRESHOLD","ExtData","constructor","type","data","this","DecodeError","Error","message","super","proto","Object","create","prototype","setPrototypeOf","defineProperty","configurable","enumerable","name","EXT_TIMESTAMP","TIMESTAMP32_MAX_SEC","TIMESTAMP64_MAX_SEC","encodeTimeSpecToTimestamp","sec","nsec","rv","Uint8Array","DataView","buffer","secHigh","secLow","encodeDateToTimeSpec","date","msec","getTime","nsecInSec","encodeTimestampExtension","object","Date","decodeTimestampToTimeSpec","byteOffset","nsec30AndSecHigh2","decodeTimestampExtension","timeSpec","timestampExtension","decode","ExtensionCodec","builtInEncoders","builtInDecoders","encoders","decoders","register","index","tryToEncode","context","i","encodeExt","decodeExt","ensureUint8Array","ArrayBuffer","isView","from","defaultCodec","Encoder","extensionCodec","maxDepth","initialBufferSize","sortKeys","forceFloat32","ignoreUndefined","forceIntegerToFloat","reinitializeState","encodeSharedRef","doEncode","slice","depth","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","ensureBufferSizeToWrite","sizeToWrite","requiredSize","resizeBuffer","newSize","newBuffer","newBytes","newView","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","writeStringHeader","utf8EncodeJs","ext","encodeExtension","Array","isArray","encodeArray","encodeBinary","toString","apply","encodeMap","size","writeU8a","item","countWithoutUndefined","keys","count","key","sort","setUint8","values","setInt8","setUint16","setInt16","setInt32","setFloat32","setFloat64","setUint64","defaultEncodeOptions","options","prettyByte","byte","abs","padStart","isValidMapKeyType","keyType","EMPTY_VIEW","EMPTY_BYTES","DataViewIndexOutOfBoundsError","getInt8","e","MORE_DATA","sharedCachedKeyDecoder","maxKeyLength","maxLengthPerKey","hit","miss","caches","canBeCached","find","records","FIND_CHUNK","record","recordBytes","j","store","random","cachedValue","slicedCopyOfBytes","call","Decoder","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","keyDecoder","totalPos","headByte","stack","setBuffer","bufferView","createDataView","appendBuffer","hasRemaining","remainingData","newData","createExtraByteError","posToShow","RangeError","doDecodeSync","decodeMulti","decodeAsync","stream","decoded","decodeArrayStream","decodeMultiAsync","decodeStream","isArrayHeaderRequired","arrayItemsLeft","readArraySize","complete","DECODE","readHeadByte","pushMapState","pushArrayState","decodeUtf8String","readF32","readF64","readU8","readU16","readU32","readU64","readI8","readI16","readI32","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","state","array","position","pop","map","readCount","headerOffset","stateIsMapKey","stringBytes","utf8DecodeTD","headOffset","extType","getUint8","getUint16","getInt16","getFloat32","getFloat64","defaultDecodeOptions","assertNonNull","ensureAsyncIterable","streamLike","Symbol","asyncIterator","async","reader","getReader","done","read","releaseLock","asyncIterableFromStream","decodeMultiStream"],"mappings":"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"}