@using Neutrino.Pictoris.Drawing;

@{
}
<style>
    .swatch {
        box-sizing: border-box;
        width: 72px;
        height: 72px;
        font-size: 11px;
        border: solid 1px black;
        display: inline-flex;
        flex-direction: row;
        align-items: center;
        align-content: center;
        overflow: hidden;
        text-align: center;
        white-space:nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .swatch div {
            overflow: hidden;
            width: 100%;
        }
</style>

<div class="page-header">
    <h1 class="neu-display">Colors</h1>
</div>
<div class="page-tabs">
    <div>&nbsp;</div>
</div>
<div class="page-content">
    <h1 class="neu-title1">
        Shared colors
    </h1>
    <p class="neu-body1">
        Основные цвета используемые в приложении
    </p>

    @foreach(var colorName in Colors.GetColorNames())
    {
        <br />
        <br />
        <h3 class="neu-title3">
            @colorName
        </h3>
        ColorF baseColor = ColorF.Parse(Colors.GetColor(colorName));
        //float[] amount = new float[] { 0.83f, 0.7f, 0.43f, 0.235f, 0.1f, 0, 0.13f, 0.24f, 0.4f, 0.6f, 0.8f, 0.9f };
        @for (int index = -5; index <= 6; index++)
    {
        ColorF result;
        if(index < 0)
        {
            result = baseColor.Shade(1f - (6f + index) / 6f);
        }
        else if(index > 0)
        {
            result = baseColor.Tint(index / 7f);
        }
        else
        {
            result = baseColor;
        }
        var hexColor = result.ToString("hex"); // ColorConverter.ToRgbHexString(c);
        var color = result.ToString("rgb"); // ColorConverter.ToRgbString(c);
        ColorF backgroundColor = result; //c.ToRgb();
        float whiteOnBackground = ContrastCalculator.GetContrast(ColorF.White, backgroundColor);
        float blackOnBackground = ContrastCalculator.GetContrast(ColorF.Black, backgroundColor);
        string foreColor;
        if(MathF.Abs(whiteOnBackground) > MathF.Abs(blackOnBackground))
        {
            foreColor = "white";
        }
        else
        {
            foreColor = "black";
        }
        string margin = index == 0 ? "margin:8px;border:4px solid rgb(0,0,0,0.5);" : "";
        <div class="swatch" style="background-color:@color;color:@foreColor;@margin">
            <div>
                @color.Substring(3)<br />@hexColor
            </div>
        </div>
        string name;
        if(index < 0) {
            name = $"{colorName}-shade{-index*10}";
        }
        else if(index > 0) {
            name = $"{colorName}-tint{index*10}";
        }
        else {
            name = colorName + "-primary";
        }
        Console.WriteLine($"--color-{name.ToLower()}: {hexColor};");
    }
    Console.WriteLine();
    }
    @{
        ColorF blueColor = ColorF.Parse(Colors.Blue);
        ColorF[] lightPalette = blueColor.Wheel(12); //.GetPalette(ColorF.Black, ColorF.White);
        ColorF[] darkPalette = blueColor.GetPalette(ColorF.White, ColorF.Black);
    }
    <h3 class="neu-title3">
        Color Wheel - 12
    </h3>
    @for (int i = 0; i < lightPalette.Length; ++i)
    {
        ColorF result = lightPalette[i];
        float whiteOnBackground = ContrastCalculator.GetContrast(ColorF.White, result);
        float blackOnBackground = ContrastCalculator.GetContrast(ColorF.Black, result);
        var hexColor = result.ToString("hex");
        var color = result.ToString("rgb");
        string foreColor;
        if (MathF.Abs(whiteOnBackground) > MathF.Abs(blackOnBackground))
        {
            foreColor = "white";
        }
        else
        {
            foreColor = "black";
        }
        <div class="swatch" style="background-color:@color;color:@foreColor;">
            <div>
                @color.Substring(3)<br />@hexColor
            </div>
        </div>
    }
    <h3 class="neu-title3">
        Brand Color Palette</h3>
    @for (int i = 0; i < darkPalette.Length; ++i)
    {
        ColorF result = darkPalette[i]; 
        float whiteOnBackground = ContrastCalculator.GetContrast(ColorF.White, result);
        float blackOnBackground = ContrastCalculator.GetContrast(ColorF.Black, result);
        var hexColor = result.ToString("hex");
        var color = result.ToString("rgb"); 
        string foreColor;
        if (MathF.Abs(whiteOnBackground) > MathF.Abs(blackOnBackground))
        {
            foreColor = "white";
        }
        else
        {
            foreColor = "black";
        }
        Console.WriteLine(hexColor);
        <div class="swatch" style="background-color:@color;color:@foreColor;">
            <div>
                @color.Substring(3)<br />@hexColor
            </div>
        </div>
        if(i == 7)
        {
            <br />
            <br />
        }
    }
</div>

