@using Neutrino.Pictoris.Drawing;

<div class="page-header">
    <h1 class="neu-display">SOLID</h1>
</div>

<div class="page-tabs">
    <div>&nbsp;</div>
</div>

<div class="page-content">
    <h1 class="neu-title1">
        SOLID
    </h1>
    <p class="neu-body1">
        В разработке и проектировании программного обеспечения – это аббревиатура пяти принципов,
        предназначенных для того, чтобы упростить процесс управления жизненным циклом программного
        продукта. В нынешние времена все принципы, в основном, рассматриваются с точки зрения
        объектно-ориентированного подхода.
    </p>
    <h2 class="neu-title2">Принципы (as is)</h2>
    <p class="neu-body1">
        <ol>
            <li>
                Single-responsibility principle (SRP) (принцип единственности ответственности).
                У любого класса не должно быть более одной причины для изменения. В данном
                принципе важно понимать, что такое «причина для изменения» и что такое «ответственность».
            </li>
            <li>
                Open-closed principle (OCP) (принцип открытости/закрытости). Программные сущности должны
                быть открыты для расширения и закрыты для изменения. В данном принципе важным является
                понимание разницы между расширением и изменением. Иногда, хочется думать, что
                расширение – это изменение.
            </li>
            <li>
                Liskov substitution principle (LSP) (принцип подстановки Лисков) Код, использующий объекты
                базового типа должен иметь возможность использовать объект любого производного типы без
                знания о том, что это производный тип.
            </li>
            <li>
                Interface segregation principle (ISP) (принцип разделения интерфейса). Правило звучит
                достаточно просто - не нужно создавать «жирных» интерфейсов. Разные клиенты – это значит
                различные интерфейсы
            </li>
            <li>
                Dependency inversion principle (DIP) (принцип инверсии зависимостей) Модуль должен зависеть
                от абстракций (интерфейсов, контрактов), но не от реализаций.
            </li>
        </ol>
    </p>

</div>

